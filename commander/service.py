from typing import List, Dict, Any
from datetime import datetime, timezone
from pathlib import Path
from collections import deque

def format_trades_report(rows: List[Dict[str, Any]]) -> str:
    """
    –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Å–ø–∏—Å–∫—É —Å–¥–µ–ª–æ–∫.

    –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π:
      time_open (DD.MM HH:MM), stage, type_close, over_strike (%), profit, opt_profit, put_profit

    –ü—Ä–∞–≤–∏–ª–∞:
      - –í —à–∞–ø–∫–µ –≤—ã–≤–æ–¥—è—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Å —ç–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏.
      - –í —Å—Ç—Ä–æ–∫–∞—Ö —Å–¥–µ–ª–æ–∫ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏.
      - –ï—Å–ª–∏ 'put_profit' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'fut_profit' (–µ—Å–ª–∏ –µ—Å—Ç—å).
      - –ß–∏—Å–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è —Å–æ –∑–Ω–∞–∫–æ–º –∏ –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.
      - over_strike —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π.
      - 'UTC' –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —É–±—Ä–∞–Ω –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ.
    """
    # –≠–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –ø–æ–¥–ø–∏—Å–∏ —à–∞–ø–∫–∏
    EMOJI = {
        "time": "üïí",
        "stage": "üß≠",
        "close": "üîö",
        "over": "üéØ",
        "pnl": "üíµ",
        "opt": "ü™ô",
        "fut": "üìä",
    }
    HEADER = (
        f"{EMOJI['time']} –í—Ä–µ–º—è | "
        f"{EMOJI['stage']} –°—Ç–∞–¥–∏—è | "
        f"{EMOJI['close']} –ó–∞–∫—Ä—ã—Ç–∏–µ | "
        f"{EMOJI['over']} OverStrike | "
        f"{EMOJI['opt']} Opt P&L | "
        f"{EMOJI['fut']} Fut P&L | "
        f"{EMOJI['pnl']} P&L"
    )

    def _parse_time_compact(s: Any) -> str:
        if not s:
            return "‚Äì"
        try:
            st = str(s).replace("T", " ")
            if st.endswith("Z"):
                st = st[:-1] + "+00:00"
            dt = datetime.fromisoformat(st)
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ UTC (–¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è), –Ω–æ –º–µ—Ç–∫—É "UTC" –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            if dt.tzinfo is None:
                dt = dt.replace(tzinfo=timezone.utc)
            dt = dt.astimezone(timezone.utc)
            return dt.strftime("%d.%m %H:%M")
        except Exception:
            return str(s)

    def _pct(v: Any) -> str:
        try:
            p = float(v) * 100.0
            if abs(p - round(p)) < 1e-9:
                return f"{int(round(p))}%"
            return f"{p:.1f}%"
        except Exception:
            return "‚Äì"

    def _num(v: Any) -> str:
        try:
            return f"{float(v):+,.2f}".replace(",", " ")
        except Exception:
            return "‚Äì"

    lines: List[str] = [HEADER]
    sum = 0
    for row in rows:
        time_s   = _parse_time_compact(row.get("time_open"))
        stage    = row.get("stage", "‚Äì")
        tclose   = row.get("type_close", "‚Äì")
        over     = _pct(row.get("over_strike"))
        profit   = _num(row.get("profit"))
        opt_pnl  = _num(row.get("opt_profit"))
        fut_raw  = row.get("fut_profit", row.get("fut_profit"))
        fut_pnl  = _num(fut_raw)
        sum+=float(profit)

        line = (
            f"{EMOJI['time']} {time_s} | "
            f"{EMOJI['stage']} {stage} | "
            f"{EMOJI['close']} {tclose} | "
            f"{EMOJI['over']} {over} | "
            f"{EMOJI['opt']} {opt_pnl} | "
            f"{EMOJI['fut']} {fut_pnl} | "
            f"{EMOJI['pnl']} {profit}"
        )
        lines.append(line)
    lines.append(f'\nSUM: {sum}')

    return "\n".join(lines)



def tail_log(file_path: str, emoji: str = "üîπ", lines_count: int = 10) -> str:
    """
    –ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ lines_count —Å—Ç—Ä–æ–∫ –∏–∑ .log —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É.
    
    :param file_path: –ü—É—Ç—å –∫ .log —Ñ–∞–π–ª—É
    :param emoji: –≠–º–æ–¥–∑–∏, –¥–æ–±–∞–≤–ª—è–µ–º–æ–µ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    :param lines_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å –∫–æ–Ω—Ü–∞
    :return: –ì–æ—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    """
    path = Path(file_path)
    if not path.exists():
        return f"‚ùå –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
    
    try:
        with path.open("r", encoding="utf-8", errors="replace") as f:
            last_lines = deque(f, maxlen=lines_count)
        
        formatted_lines = [f"{emoji} {line.rstrip()}" for line in last_lines]
        return "\n".join(formatted_lines)
    
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"
